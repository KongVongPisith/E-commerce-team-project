{
    "sourceFile": "src/components/Shop/WithdrawMoney.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1703832939995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1703832939995,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { AiOutlineDelete } from \"react-icons/ai\";\nimport { RxCross1 } from \"react-icons/rx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { getAllOrdersOfShop } from \"../../redux/actions/order\";\nimport { loadSeller } from \"../../redux/actions/user\";\nimport { server } from \"../../server\";\nimport styles from \"../../styles/styles\";\n\nconst WithdrawMoney = () => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const { seller } = useSelector((state) => state.seller);\n  const [paymentMethod, setPaymentMethod] = useState(false);\n  const [withdrawAmount, setWithdrawAmount] = useState(50);\n  const [bankInfo, setBankInfo] = useState({\n    bankName: \"\",\n    bankCountry: \"\",\n    bankSwiftCode: null,\n    bankAccountNumber: null,\n    bankHolderName: \"\",\n    bankAddress: \"\",\n  });\n\n  useEffect(() => {\n    dispatch(getAllOrdersOfShop(seller._id));\n  }, [dispatch]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const withdrawMethod = {\n      bankName: bankInfo.bankName,\n      bankCountry: bankInfo.bankCountry,\n      bankSwiftCode: bankInfo.bankSwiftCode,\n      bankAccountNumber: bankInfo.bankAccountNumber,\n      bankHolderName: bankInfo.bankHolderName,\n      bankAddress: bankInfo.bankAddress,\n    };\n\n    setPaymentMethod(false);\n\n    await axios\n      .put(\n        `${server}/shop/update-payment-methods`,\n        {\n          withdrawMethod,\n        },\n        { withCredentials: true }\n      )\n      .then((res) => {\n        toast.success(\"Withdraw method added successfully!\");\n        dispatch(loadSeller());\n        setBankInfo({\n          bankName: \"\",\n          bankCountry: \"\",\n          bankSwiftCode: null,\n          bankAccountNumber: null,\n          bankHolderName: \"\",\n          bankAddress: \"\",\n        });\n      })\n      .catch((error) => {\n        console.log(error.response.data.message);\n      });\n  };\n\n  const deleteHandler = async () => {\n    await axios\n      .delete(`${server}/shop/delete-withdraw-method`, {\n        withCredentials: true,\n      })\n      .then((res) => {\n        toast.success(\"Withdraw method deleted successfully!\");\n        dispatch(loadSeller());\n      });\n  };\n\n  const error = () => {\n    toast.error(\"You not have enough balance to withdraw!\");\n  };\n\n  const withdrawHandler = async () => {\n    if (withdrawAmount < 20 || withdrawAmount > availableBalance) {\n      toast.error(\"You can't withdraw this amount!\");\n    } else {\n      const amount = withdrawAmount;\n      await axios\n        .post(\n          `${server}/withdraw/create-withdraw-request`,\n          { amount },\n          { withCredentials: true }\n        )\n        .then((res) => {\n          toast.success(\"Withdraw money request is successful!\");\n        });\n    }\n  };\n\n  const availableBalance = seller?.availableBalance.toFixed(2);\n\n  return (\n    <div className=\"w-full h-[90vh] p-8\">\n      <div className=\"w-full bg-white h-full rounded flex items-center justify-center flex-col\">\n        <h5 className=\"text-[20px] pb-4\">\n          Available Balance: ${availableBalance}\n        </h5>\n        <div\n          className={`${styles.button} text-white !h-[42px] !rounded`}\n          onClick={() => (availableBalance < 50 ? error() : setOpen(true))}\n        >\n          Withdraw\n        </div>\n      </div>\n      {open && (\n        <div className=\"w-full h-screen z-[9999] fixed top-0 left-0 flex items-center justify-center bg-[#0000004e]\">\n          <div\n            className={`w-[95%] 800px:w-[50%] bg-white shadow rounded ${\n              paymentMethod ? \"h-[80vh] overflow-y-scroll\" : \"h-[unset]\"\n            } min-h-[40vh] p-3`}\n          >\n            <div className=\"w-full flex justify-end\">\n              <RxCross1\n                size={25}\n                onClick={() => setOpen(false) || setPaymentMethod(false)}\n                className=\"cursor-pointer\"\n              />\n            </div>\n            {paymentMethod ? (\n              <div>\n                <h3 className=\"text-[22px] font-Poppins text-center font-[600]\">\n                  Add new Withdraw Method:\n                </h3>\n                <form onSubmit={handleSubmit}>\n                  <div>\n                    <label>\n                      Bank Name <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      required\n                      value={bankInfo.bankName}\n                      onChange={(e) =>\n                        setBankInfo({ ...bankInfo, bankName: e.target.value })\n                      }\n                      id=\"\"\n                      placeholder=\"Enter your Bank name!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n                  <div className=\"pt-2\">\n                    <label>\n                      Bank Country <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      value={bankInfo.bankCountry}\n                      onChange={(e) =>\n                        setBankInfo({\n                          ...bankInfo,\n                          bankCountry: e.target.value,\n                        })\n                      }\n                      id=\"\"\n                      required\n                      placeholder=\"Enter your bank Country!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n                  <div className=\"pt-2\">\n                    <label>\n                      Bank Swift Code <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      id=\"\"\n                      required\n                      value={bankInfo.bankSwiftCode}\n                      onChange={(e) =>\n                        setBankInfo({\n                          ...bankInfo,\n                          bankSwiftCode: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter your Bank Swift Code!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n\n                  <div className=\"pt-2\">\n                    <label>\n                      Bank Account Number{\" \"}\n                      <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"number\"\n                      name=\"\"\n                      id=\"\"\n                      value={bankInfo.bankAccountNumber}\n                      onChange={(e) =>\n                        setBankInfo({\n                          ...bankInfo,\n                          bankAccountNumber: e.target.value,\n                        })\n                      }\n                      required\n                      placeholder=\"Enter your bank account number!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n                  <div className=\"pt-2\">\n                    <label>\n                      Bank Holder Name <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      required\n                      value={bankInfo.bankHolderName}\n                      onChange={(e) =>\n                        setBankInfo({\n                          ...bankInfo,\n                          bankHolderName: e.target.value,\n                        })\n                      }\n                      id=\"\"\n                      placeholder=\"Enter your bank Holder name!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n\n                  <div className=\"pt-2\">\n                    <label>\n                      Bank Address <span className=\"text-red-500\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"\"\n                      required\n                      id=\"\"\n                      value={bankInfo.bankAddress}\n                      onChange={(e) =>\n                        setBankInfo({\n                          ...bankInfo,\n                          bankAddress: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter your bank address!\"\n                      className={`${styles.input} mt-2`}\n                    />\n                  </div>\n\n                  <button\n                    type=\"submit\"\n                    className={`${styles.button} mb-3 text-white`}\n                  >\n                    Add\n                  </button>\n                </form>\n              </div>\n            ) : (\n              <>\n                <h3 className=\"text-[22px] font-Poppins\">\n                  Available Withdraw Methods:\n                </h3>\n\n                {seller && seller?.withdrawMethod ? (\n                  <div>\n                    <div className=\"800px:flex w-full justify-between items-center\">\n                      <div className=\"800px:w-[50%]\">\n                        <h5>\n                          Account Number:{\" \"}\n                          {\"*\".repeat(\n                            seller?.withdrawMethod.bankAccountNumber.length - 3\n                          ) +\n                            seller?.withdrawMethod.bankAccountNumber.slice(-3)}\n                        </h5>\n                        <h5>Bank Name: {seller?.withdrawMethod.bankName}</h5>\n                      </div>\n                      <div className=\"800px:w-[50%]\">\n                        <AiOutlineDelete\n                          size={25}\n                          className=\"cursor-pointer\"\n                          onClick={() => deleteHandler()}\n                        />\n                      </div>\n                    </div>\n                    <br />\n                    <h4>Available Balance: {availableBalance}$</h4>\n                    <br />\n                    <div className=\"800px:flex w-full items-center\">\n                      <input\n                        type=\"number\"\n                        placeholder=\"Amount...\"\n                        value={withdrawAmount}\n                        onChange={(e) => setWithdrawAmount(e.target.value)}\n                        className=\"800px:w-[100px] w-[full] border 800px:mr-3 p-1 rounded\"\n                      />\n                      <div\n                        className={`${styles.button} !h-[42px] text-white`}\n                        onClick={withdrawHandler}\n                      >\n                        Withdraw\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <p className=\"text-[18px] pt-2\">\n                      No Withdraw Methods available!\n                    </p>\n                    <div className=\"w-full flex items-center\">\n                      <div\n                        className={`${styles.button} text-[#fff] text-[18px] mt-4`}\n                        onClick={() => setPaymentMethod(true)}\n                      >\n                        Add new\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WithdrawMoney;\n"
        }
    ]
}