{
    "sourceFile": "src/components/Profile/ProfileContent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1705453703389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1705453703389,
            "name": "Commit-0",
            "content": "import { Button } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport axios from 'axios';\nimport { Country, State } from \"country-state-city\";\nimport React, { useEffect, useState } from 'react';\nimport { AiOutlineArrowRight, AiOutlineCamera, AiOutlineDelete } from 'react-icons/ai';\nimport { MdTrackChanges } from \"react-icons/md\";\nimport { RxCross1 } from 'react-icons/rx';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { getAllOrdersOfUser } from '../../redux/actions/order';\nimport {\n  deleteUserAddress,\n  loadUser,\n  updatUserAddress,\n  updateUserInformation,\n} from \"../../redux/actions/user\";\nimport { backend_url, server } from \"../../server\";\nimport styles from \"../../styles/styles\";\n\n\nconst ProfileContent = ({ active }) => {\n    const { user, error, successMessage } = useSelector((state) => state.user);\n    const [name, setName] = useState(user && user.name);\n    const [email, setEmail] = useState(user && user.email);\n    const [phoneNumber, setPhoneNumber] = useState(user && user.phoneNumber);\n    const [password, setPassword] = useState(\"\");\n    const [avatar, setAvatar] = useState(null);\n\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if (error) {\n            toast.error(error);\n            dispatch({ type: \"clearErrors\" });\n        }\n        if (successMessage) {\n            toast.success(successMessage);\n            dispatch({ type: \"clearMessages\" });\n        }\n    }, [error, successMessage]);\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch(updateUserInformation(name, email, phoneNumber, password));\n    }\n\n    // Image update\n    const handleImage = async (e) => {\n        const file = e.target.files[0];\n        setAvatar(file);\n\n        const formData = new FormData();\n\n        formData.append(\"image\", e.target.files[0]);\n\n        await axios\n            .put(`${server}/user/update-avatar`, formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                },\n                withCredentials: true,\n            })\n            .then((response) => {\n                dispatch(loadUser());\n                toast.success(\"avatar updated successfully!\");\n            })\n            .catch((error) => {\n                toast.error(error);\n            });\n    };\n\n\n    return (\n        <div className='w-full'>\n            {/* Profile */}\n            {\n                active === 1 && (\n                    <>\n                        <div className=\"flex justify-center w-full\">\n                            <div className='relative'>\n                                <img src={`${backend_url}${user?.avatar}`}\n                                    className=\"w-[150px] h-[150px] rounded-full object-cover border-[3px] border-[#3ad132]\"\n                                    alt=\"profile img\" />\n\n                                <div className=\"w-[30px] h-[30px] bg-[#E3E9EE] rounded-full flex items-center justify-center cursor-pointer absolute bottom-[5px] right-[5px]\">\n                                    <input type=\"file\"\n                                        id=\"image\"\n                                        className=\"hidden\"\n                                        onChange={handleImage}\n                                    />\n                                    <label htmlFor=\"image\">\n                                        <AiOutlineCamera />\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\n                        <br />\n\n                        <div className='w-full px-5'>\n                            <form onSubmit={handleSubmit} aria-required={true}>\n                                <div className='w-full 800px:flex block pb-3'>\n\n                                    <div className=' w-[100%] 800px:w-[50%]'>\n                                        <label className='block pb-2'>Full Name</label>\n                                        <input type=\"text\"\n                                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                                            required\n                                            value={name}\n                                            onChange={(e) => setName(e.target.value)}\n                                        />\n                                    </div>\n\n                                    <div className=' w-[100%] 800px:w-[50%]'>\n                                        <label className='block pb-2'>Email Address</label>\n                                        <input type=\"text\"\n                                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                                            required\n                                            value={email}\n                                            onChange={(e) => setEmail(e.target.value)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full 800px:flex block pb-3\">\n                                    <div className=\" w-[100%] 800px:w-[50%]\">\n                                        <label className=\"block pb-2\">Phone Number</label>\n                                        <input\n                                            type=\"number\"\n                                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                                            required\n                                            value={phoneNumber}\n                                            onChange={(e) => setPhoneNumber(e.target.value)}\n                                        />\n                                    </div>\n\n                                    <div className=\" w-[100%] 800px:w-[50%]\">\n                                        <label className=\"block pb-2\">Enter your password</label>\n                                        <input\n                                            type=\"password\"\n                                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                                            required\n                                            value={password}\n                                            onChange={(e) => setPassword(e.target.value)}\n                                        />\n                                    </div>\n\n                                </div>\n                                <input\n                                    className={`w-[250px] h-[40px] border border-[#3a24db] text-center text-[#3a24db] rounded-[3px] mt-8 cursor-pointer`}\n                                    required\n                                    value=\"Update\"\n                                    type=\"submit\"\n                                />\n                            </form>\n                        </div>\n                    </>\n                )\n            }\n\n            {/* Odder  */}\n            {\n                active === 2 && (\n                    <div>\n                        <AllOrders />\n                    </div>\n                )\n            }\n\n            {/* Refund order */}\n            {\n                active === 3 && (\n                    <div>\n                        <AllRefundOrders />\n                    </div>\n                )\n            }\n\n            {/* Track order */}\n            {active === 5 && (\n                <div>\n                    <TrackOrder />\n                </div>\n            )}\n\n            {/* Change Password */}\n            {active === 6 && (\n                <div>\n                    <ChangePassword />\n                </div>\n            )}\n\n            {/* user Address */}\n            {active === 7 && (\n                <div>\n                    <Address />\n                </div>\n            )}\n\n        </div >\n    )\n}\n\n// All orders\nconst AllOrders = () => {\n    const { user } = useSelector((state) => state.user);\n\n    const { orders } = useSelector((state) => state.order);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllOrdersOfUser(user._id));\n    }, []);\n\n\n\n\n    const columns = [\n        { field: \"id\", headerName: \"Order ID\", minWidth: 150, flex: 0.7 },\n\n        {\n            field: \"status\",\n            headerName: \"Status\",\n            minWidth: 130,\n            flex: 0.7,\n            cellClassName: (params) => {\n                return params.getValue(params.id, \"status\") === \"Delivered\"\n                    ? \"greenColor\"\n                    : \"redColor\";\n            },\n        },\n        {\n            field: \"itemsQty\",\n            headerName: \"Items Qty\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.7,\n        },\n\n        {\n            field: \"total\",\n            headerName: \"Total\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.8,\n        },\n\n        {\n            field: \" \",\n            flex: 1,\n            minWidth: 150,\n            headerName: \"\",\n            type: \"number\",\n            sortable: false,\n            renderCell: (params) => {\n                return (\n                    <>\n                        <Link to={`/user/order/${params.id}`}>\n                            <Button>\n                                <AiOutlineArrowRight size={20} />\n                            </Button>\n                        </Link>\n                    </>\n                );\n            },\n        },\n    ];\n\n    const row = [];\n\n    orders &&\n        orders.forEach((item) => {\n            row.push({\n                id: item._id,\n                itemsQty: item.cart.length,\n                total: \"US$ \" + item.totalPrice,\n                status: item.status,\n            });\n        });\n\n\n    return (\n        <>\n            <div className='pl-8 pt-1'>\n                <DataGrid\n                    rows={row}\n                    columns={columns}\n                    pageSize={10}\n                    disableSelectionOnClick\n                    autoHeight\n                />\n\n            </div>\n        </>\n    )\n}\n\n// Refund page\n\nconst AllRefundOrders = () => {\n    const { user } = useSelector((state) => state.user);\n    const { orders } = useSelector((state) => state.order);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllOrdersOfUser(user._id));\n    }, []);\n\n\n    const eligibleOrders = orders && orders.filter((item) => item.status === \"Processing refund\");\n\n    const columns = [\n        { field: \"id\", headerName: \"Order ID\", minWidth: 150, flex: 0.7 },\n\n        {\n            field: \"status\",\n            headerName: \"Status\",\n            minWidth: 130,\n            flex: 0.7,\n            cellClassName: (params) => {\n                return params.getValue(params.id, \"status\") === \"Delivered\"\n                    ? \"greenColor\"\n                    : \"redColor\";\n            },\n        },\n        {\n            field: \"itemsQty\",\n            headerName: \"Items Qty\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.7,\n        },\n\n        {\n            field: \"total\",\n            headerName: \"Total\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.8,\n        },\n\n        {\n            field: \" \",\n            flex: 1,\n            minWidth: 150,\n            headerName: \"\",\n            type: \"number\",\n            sortable: false,\n            renderCell: (params) => {\n                return (\n                    <>\n                        <Link to={`/user/order/${params.id}`}>\n                            <Button>\n                                <AiOutlineArrowRight size={20} />\n                            </Button>\n                        </Link>\n                    </>\n                );\n            },\n        },\n    ];\n\n    const row = [];\n\n    eligibleOrders &&\n        eligibleOrders.forEach((item) => {\n            row.push({\n                id: item._id,\n                itemsQty: item.cart.length,\n                total: \"US$ \" + item.totalPrice,\n                status: item.status,\n            });\n        });\n\n    return (\n        <div className=\"pl-8 pt-1\">\n            <DataGrid\n                rows={row}\n                columns={columns}\n                pageSize={10}\n                autoHeight\n                disableSelectionOnClick\n            />\n        </div>\n    );\n};\n\n\n// Track order\nconst TrackOrder = () => {\n\n    const { user } = useSelector((state) => state.user);\n    const { orders } = useSelector((state) => state.order);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllOrdersOfUser(user._id));\n    }, []);\n\n\n\n    const columns = [\n        { field: \"id\", headerName: \"Order ID\", minWidth: 150, flex: 0.7 },\n\n        {\n            field: \"status\",\n            headerName: \"Status\",\n            minWidth: 150,\n            flex: 0.7,\n            cellClassName: (params) => {\n                return params.getValue(params.id, \"status\") === \"Delivered\"\n                    ? \"greenColor\"\n                    : \"redColor\";\n            },\n        },\n        {\n            field: \"itemsQty\",\n            headerName: \"Items Qty\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.7,\n        },\n\n        {\n            field: \"total\",\n            headerName: \"Total\",\n            type: \"number\",\n            minWidth: 130,\n            flex: 0.8,\n        },\n\n        {\n            field: \" \",\n            flex: 1,\n            minWidth: 150,\n            headerName: \"\",\n            type: \"number\",\n            sortable: false,\n            renderCell: (params) => {\n                return (\n                    <>\n                        <Link to={`/user/track/order/${params.id}`}>\n                            <Button>\n                                <MdTrackChanges size={20} />\n                            </Button>\n                        </Link>\n                    </>\n                );\n            },\n        },\n    ];\n\n    const row = []\n\n    orders &&\n        orders.forEach((item) => {\n            row.push({\n                id: item._id,\n                itemsQty: item.cart.length,\n                total: \"US$ \" + item.totalPrice,\n                status: item.status,\n            });\n        });\n\n    return (\n        <div className=\"pl-8 pt-1\">\n            <DataGrid\n                rows={row}\n                columns={columns}\n                pageSize={10}\n                disableSelectionOnClick\n                autoHeight\n            />\n        </div>\n    )\n}\n\n\n// Payment method\n\nconst ChangePassword = () => {\n\n    const [oldPassword, setOldPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const passwordChangeHandler = async (e) => {\n        e.preventDefault();\n\n        await axios\n            .put(\n                `${server}/user/update-user-password`,\n                { oldPassword, newPassword, confirmPassword },\n                { withCredentials: true }\n            )\n            .then((res) => {\n                toast.success(\"Pawword is updated\");\n                setOldPassword(\"\");\n                setNewPassword(\"\");\n                setConfirmPassword(\"\");\n            })\n            .catch((error) => {\n                toast.error(error.response.data.message);\n            });\n    };\n\n    return (\n        <div className='w-full px-5'>\n            <h1\n                className='text-[25px] text-center font-[600] text[#000000ba] pb-2'\n            >\n                Change Password\n            </h1>\n            <div className='w-full'>\n                <form\n                    aria-required\n                    onSubmit={passwordChangeHandler}\n                    className=\"flex flex-col items-center\"\n                >\n                    <div className=\" w-[100%] 800px:w-[50%] mt-5\">\n                        <label className='block pb-2'>Enter your Old password</label>\n                        <input type=\"password\"\n                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                            required\n                            value={oldPassword}\n                            onChange={(e) => setOldPassword(e.target.value)}\n                        />\n                    </div>\n\n                    <div className=\" w-[100%] 800px:w-[50%] mt-2\">\n                        <label className='block pb-2'>Enter your new Password</label>\n                        <input type=\"password\"\n                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                            required\n                            value={newPassword}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                        />\n                    </div>\n\n                    <div className=\" w-[100%] 800px:w-[50%] mt-2\">\n                        <label className=\"block pb-2\">Enter your confirm password</label>\n                        <input\n                            type=\"password\"\n                            className={`${styles.input} !w-[95%] mb-4 800px:mb-0`}\n                            required\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        />\n                        <input\n                            className={`w-[95%] h-[40px] border border-[#3a24db] text-center text-[#3a24db] rounded-[3px] mt-8 cursor-pointer`}\n                            required\n                            value=\"Update\"\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n\n            </div>\n\n\n\n\n        </div>\n\n    )\n}\n\n// Address\nconst Address = () => {\n\n    const [open, setOpen] = useState(false);\n    const [country, setCountry] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [zipCode, setZipCode] = useState();\n    const [address1, setAddress1] = useState(\"\");\n    const [address2, setAddress2] = useState(\"\");\n    const [addressType, setAddressType] = useState(\"\");\n    const { user } = useSelector((state) => state.user);\n    const dispatch = useDispatch();\n\n\n    const addressTypeData = [\n        {\n            name: \"Default\",\n        },\n        {\n            name: \"Home\",\n        },\n        {\n            name: \"Office\",\n        },\n    ];\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (addressType === \"\" || country === \"\" || city === \"\") {\n            toast.error(\"Please fill all the fields!\");\n        } else {\n            // hear use redex\n            dispatch(\n                updatUserAddress(\n                    country,\n                    city,\n                    address1,\n                    address2,\n                    zipCode,\n                    addressType\n                )\n            );\n            setOpen(false);\n            setCountry(\"\");\n            setCity(\"\");\n            setAddress1(\"\");\n            setAddress2(\"\");\n            setZipCode(null); // return type is int so default is null\n            setAddressType(\"\");\n        }\n    }\n\n    const handleDelete = (item) => {\n        const id = item._id;\n        dispatch(deleteUserAddress(id));\n    }\n\n    return (\n        <div className='w-full px-5'>\n\n            {\n                open && (\n                    <div className=\"fixed w-full h-screen bg-[#0000004b] top-0 left-0 flex items-center justify-center \">\n                        <div className=\"w-[35%] h-[80vh] bg-white rounded shadow relative overflow-y-scroll\">\n                            <div className=\"w-full flex justify-end p-3\">\n                                <RxCross1\n                                    size={30}\n                                    className=\"cursor-pointer\"\n                                    onClick={() => setOpen(false)}\n                                />\n                            </div>\n                            <h1 className=\"text-center text-[25px] font-Poppins\">\n                                Add New Address\n                            </h1>\n                            <div className='w-full'>\n                                <form aria-required onSubmit={handleSubmit} className=\"w-full\">\n                                    <div className=\"w-full block p-4\">\n                                        <div className=\"w-full pb-2\">\n                                            <label className=\"block pb-2\">Country</label>\n                                            <select\n                                                name=\"\"\n                                                id=\"\"\n                                                value={country}\n                                                onChange={(e) => setCountry(e.target.value)}\n                                                className=\"w-[95%] border h-[40px] rounded-[5px]\"\n                                            >\n                                                <option value=\"\"\n                                                    className='bloc border pb-2'\n                                                >\n                                                    Choose your contry\n                                                </option>\n                                                {\n                                                    Country &&\n                                                    Country.getAllCountries().map((item) => (\n                                                        <option\n                                                            className=\"block pb-2\"\n                                                            key={item.isoCode}\n                                                            value={item.isoCode}\n                                                        >\n                                                            {item.name}\n                                                        </option>\n                                                    ))}\n                                            </select>\n                                        </div>\n\n                                        {/* City */}\n                                        <div className=\"w-full pb-2\">\n                                            <label className=\"block pb-2\">Choose your City</label>\n                                            <select\n                                                name=\"\"\n                                                id=\"\"\n                                                value={city}\n                                                onChange={(e) => setCity(e.target.value)}\n                                                className=\"w-[95%] border h-[40px] rounded-[5px]\"\n                                            >\n                                                <option value=\"\" className=\"block border pb-2\">\n                                                    choose your city\n                                                </option>\n                                                {State &&\n                                                    State.getStatesOfCountry(country).map((item) => (\n                                                        <option\n                                                            className=\"block pb-2\"\n                                                            key={item.isoCode}\n                                                            value={item.isoCode}\n                                                        >\n                                                            {item.name}\n                                                        </option>\n                                                    ))}\n                                            </select>\n                                        </div>\n\n                                        {/* Address 1 */}\n                                        <div className=\"w-full pb-2\">\n                                            <label className=\"block pb-2\">Address 1</label>\n                                            <input\n                                                type=\"address\"\n                                                className={`${styles.input}`}\n                                                required\n                                                value={address1}\n                                                onChange={(e) => setAddress1(e.target.value)}\n                                            />\n                                        </div>\n                                        {/* Address 2 */}\n                                        <div className=\"w-full pb-2\">\n                                            <label className=\"block pb-2\">Address 2</label>\n                                            <input\n                                                type=\"address\"\n                                                className={`${styles.input}`}\n                                                required\n                                                value={address2}\n                                                onChange={(e) => setAddress2(e.target.value)}\n                                            />\n                                        </div>\n\n                                        <div className=\"w-full pb-2\">\n                                            <label className=\"block pb-2\">Zip Code</label>\n                                            <input\n                                                type=\"number\"\n                                                className={`${styles.input}`}\n                                                required\n                                                value={zipCode}\n                                                onChange={(e) => setZipCode(e.target.value)}\n                                            />\n                                        </div>\n\n                                        <div>\n                                            <label className='block pb-2'>Address Type</label>\n                                            <select name=\"\" id=\"\"\n                                                value={addressType}\n                                                onChange={(e) => setAddressType(e.target.value)}\n                                                className='w-[95%] border h-[40px]  rounded-[5px]'\n                                            >\n                                                <option value=\"\"\n                                                    className='block border pb-2'\n                                                >\n                                                    Choose Yoour Address Type\n                                                </option>\n                                                {\n                                                    addressTypeData &&\n                                                    addressTypeData.map((item) => (\n                                                        <option\n                                                            className='block pb-2'\n                                                            key={item.name}\n                                                            value={item.name}\n                                                        >\n                                                            {item.name}\n                                                        </option>\n                                                    ))}\n                                            </select>\n                                        </div>\n\n                                        <div className=\" w-full pb-2\">\n                                            <input\n                                                type=\"submit\"\n                                                className={`${styles.input} mt-5 cursor-pointer`}\n                                                required\n                                                readOnly\n                                            />\n                                        </div>\n\n                                    </div>\n                                </form>\n\n                            </div>\n                        </div>\n\n                    </div>\n                )\n\n            }\n\n            <div className='flex w-full items-center justify-between' >\n                <h1\n                    className='text-[25px] font-[600] text[#000000ba] pb-2'\n                >\n                    My Address\n                </h1>\n                <div className={`${styles.button} rounded-md`}\n                    onClick={() => setOpen(true)}\n                >\n                    <span className='text-[#fff]'>Add New</span>\n\n                </div>\n            </div>\n            <br />\n\n            {user &&\n                user.addresses.map((item, index) => (\n                    <div\n                        className=\"w-full bg-white h-min 800px:h-[70px] rounded-[4px] flex items-center px-3 shadow justify-between pr-10 mb-5\"\n                        key={index}\n                    >\n                        <div className=\"flex items-center\">\n                            <h5 className=\"pl-5 font-[600]\">{item.addressType}</h5>\n                        </div>\n                        <div className=\"pl-8 flex items-center\">\n                            <h6 className=\"text-[12px] 800px:text-[unset]\">\n                                {item.address1} {item.address2}\n                            </h6>\n                        </div>\n                        <div className=\"pl-8 flex items-center\">\n                            <h6 className=\"text-[12px] 800px:text-[unset]\">\n                                {user && user.phoneNumber}\n                            </h6>\n                        </div>\n                        <div className=\"min-w-[10%] flex items-center justify-between pl-8\">\n                            <AiOutlineDelete\n                                size={25}\n                                className=\"cursor-pointer\"\n                                onClick={() => handleDelete(item)}\n                            />\n                        </div>\n                    </div>\n                ))}\n\n            {\n                user && user.addresses.length === 0 && (\n                    <h5 className=\"text-center pt-8 text-[18px]\">\n                        You not have any saved address!\n                    </h5>\n                )}\n        </div>\n    )\n\n}\n\n\nexport default ProfileContent"
        }
    ]
}